{"version":3,"sources":["src/Managers/MouseManager/MouseManager.js","src/Units/NormalizedTilePositions.js","src/Managers/TilesCheckingManager/checkIfTileIsFree.js","src/Managers/TurretManager/TurretTypes/FastFiring/createFastFiringTurret.js","src/Managers/TurretManager/TurretTypes/index.js","src/Managers/TurretManager/TurretTypes/PowerTurret/createPowerTurret.js","src/CreateElement/Turrets/createTurret.js","src/Utils/Tiles/centerPointOfTile.js","src/Managers/TurretManager/FindDistanceBetweenVectors/FindDistanceBetweenVectors.js","src/Managers/TurretManager/TurretManager.js","src/CreateElement/MapElement/Walls/wallsUtils.js","src/CreateElement/MapElement/Walls/createWallTile.js","src/CreateElement/MapElement/createTerrainTile.js","src/Managers/MapManager/MapManager.js","src/Managers/ShopManager/templates/shopMenu/shopMenuHeader.js","src/Managers/ShopManager/templates/shopTurretList/shopTurretList.js","src/Managers/ShopManager/ShopManager.js","src/CreateElement/Mobs/MobCreator.js","src/CreateElement/Mobs/Models/MobsModels.js","src/Managers/MobsManager/MobsManager.js","src/Utils/Debuggers/GameDebugger.js","src/Managers/LifeManager/LifeManager.js","src/Managers/WaveManager/WaveManager.js","src/Utils/RemoveElFromArrReverse.js","src/PathFinding/aStar/aStar.js","src/Managers/ScoreManager/ScoreManager.js","src/index.js"],"names":["MouseManager","canvas","ctx","cellSize","x","y","cellX","cellY","handler","addEventListener","e","rect","getBoundingClientRect","clientX","left","clientY","top","self","gameMouseMoveHandler","event","normalizationCursorPosition","fillStyle","fillRect","normalizedTilePositions","vector","checkIfTileIsFree","object","turrets","freeTile","i","length","turretChosenTileSameVectors","turretChosenTileDiffVectors","console","warn","createFastFiringTurret","color","type","range","turret","damage","attackSpeed","shootingAllowed","turretTypes","power","fast","createPowerTurret","createTurret","centerPointOfTile","point","FindDistanceBetweenVectors","currentX","currentY","targetX","targetY","parseInt","Math","sqrt","pow","TurretsManager","mobsManager","turretPlacedSuccess","pickedTurret","vectorNormY","vectorNormX","log","push","map","_renderFastTurret","_renderPowerTurret","getMobs","mob","index","dinstanceFromturret","isMobInRange","setTimeout","_shootToMob","_drawLaser","beginPath","lineWidth","strokeStyle","moveTo","lineTo","stroke","hp","slice","arc","PI","fill","_showTurretRange","isUpperWall","isLeftWall","isBottomWall","lastColumn","lastRow","isRightWall","createWallTile","passable","createTerrainTile","f","g","h","neighbors","addNeighbors","j","maxRows","maxCols","gameDebugger","MapManager","cols","rows","gameDebuggerManager","gameMap","terrain","startSpawnPoint","endSpawnPoint","_createAndAddRow","_createAndAddWalls","_createSpawnAndAddPoints","_createAndAddTerrain","xVec","yVec","debugTileVectors","_isEndSpawnPoint","_isStartSpawnPoint","round","shopMenuHeader","currentMoney","shopTurretList","ShopManager","money","shopRoot","document","getElementById","renderPanel","pickTurretType","value","_shopClickHandler","_setPickedTurret","innerHTML","target","id","MobCreator","size","speed","reward","score","random","Object","assign","move","showHp","hpWidth","xCenter","yCenter","Style","render","logOk","toUpperCase","MobsModels","tank","MobsManager","mapManager","lifeManager","shopManager","scoreManager","mobs","turretsManager","wave","time","getStartSpawnPoint","floor","_checkMobHp","getTurrets","_checkIfMobHitPlayer","getEndSpawnPoint","lifeHit","renderLife","splice","addMoney","addScore","renderScore","GameDebugger","debugMode","txt","vectorX","vectorY","fontFamily","font","textAlign","fillText","tile","_isDebugMode","arr","fillTile","addText","toggle","LifeManager","lifeUi","life","createWave","renderMob","removeElementFromArrReverse","el","aStar","start","end","openSet","closedSet","winner","current","neighbor","neiX","neiY","endX","endY","includes","currG","cameFrom","ScoreManager","scoreUi","window","onload","getContext","gameDebugModeCheckbox","width","height","mouseManager","renderMap","inject","init","gameLoop","turretShooting","drawMousePosition","waveMobsMove","renderTurrets","checkIfGameOver","alert","requestAnimationFrame","toggleDebuggerMode","checked","gameMouseClickHandler","placeTurret","getPickedTurret","getMousePosPerTile","isTurretPlacedSuccess","setMoney","getMoney"],"mappings":"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","file":"src.97b4f622.js","sourceRoot":"..","sourcesContent":["export class MouseManager {\r\n  constructor(canvas, ctx, cellSize) {\r\n    this.canvas = canvas;\r\n    this.ctx = ctx;\r\n    this.x = 0;\r\n    this.y = 0;\r\n    this.cellX = 0;\r\n    this.cellY = 0;\r\n\r\n    this.cellSize = cellSize;\r\n  }\r\n\r\n  gameMouseMoveHandler(handler) {\r\n    this.canvas.addEventListener('mousemove', handler);\r\n  }\r\n\r\n  gameMouseClickHandler(handler) {\r\n    this.canvas.addEventListener('click', handler);\r\n  }\r\n\r\n  normalizationCursorPosition(e) {\r\n    let rect = this.canvas.getBoundingClientRect();\r\n    this.x = e.clientX - rect.left;\r\n    this.y = e.clientY - rect.top;\r\n    this.cellX = ~~(this.x / this.cellSize);\r\n    this.cellY = ~~(this.y / this.cellSize);\r\n  }\r\n\r\n  drawMousePosition() {\r\n    const self = this;\r\n    this.gameMouseMoveHandler((event) =>\r\n      self.normalizationCursorPosition(event)\r\n    );\r\n    this.ctx.fillStyle = 'rgba(255, 255, 255, 0.2)';\r\n    this.ctx.fillRect(\r\n      this.cellX * this.cellSize,\r\n      this.cellY * this.cellSize,\r\n      this.cellSize,\r\n      this.cellSize\r\n    );\r\n  }\r\n\r\n  getMousePosPerTile() {\r\n    return {\r\n      x: this.cellX,\r\n      y: this.cellY,\r\n    };\r\n  }\r\n}\r\n","export const normalizedTilePositions = (vector, cellSize) => vector * cellSize;\r\n","import { normalizedTilePositions } from '../../Units/NormalizedTilePositions';\r\n\r\nexport function checkIfTileIsFree(object, turrets, cellSize) {\r\n  let freeTile = true;\r\n\r\n  for (let i = 0; i < turrets.length; i++) {\r\n    const turretChosenTileSameVectors =\r\n      turrets[i].x === normalizedTilePositions(object.x, cellSize) &&\r\n      turrets[i].y === normalizedTilePositions(object.y, cellSize);\r\n\r\n    const turretChosenTileDiffVectors =\r\n      turrets[i].x !== normalizedTilePositions(object.x, cellSize) &&\r\n      turrets[i].y !== normalizedTilePositions(object.y, cellSize);\r\n\r\n    // Check if tile is already taken\r\n    if (turretChosenTileSameVectors) {\r\n      // If tile is already taken by another turret break loop\r\n      freeTile = false;\r\n      break;\r\n    } else if (turretChosenTileDiffVectors) {\r\n      freeTile = true;\r\n    }\r\n  }\r\n  if (!freeTile) console.warn('Tile is already taken!');\r\n  return freeTile;\r\n}\r\n","export function createFastFiringTurret(x, y) {\r\n  return {\r\n    y: y,\r\n    x: x,\r\n    color: '#FF34859d',\r\n    type: 'fastFiringTurret',\r\n    range: 100,\r\n    turret: true,\r\n    damage: 40,\r\n    attackSpeed: 1000,\r\n    shootingAllowed: true,\r\n  };\r\n}\r\n","export const turretTypes = {\r\n  power: 'powerTurret',\r\n  fast: 'fastFiring',\r\n};\r\n","import { turretTypes } from '../index';\r\n\r\nexport function createPowerTurret(x, y) {\r\n  return {\r\n    y: y,\r\n    x: x,\r\n    color: '#FFf5edba',\r\n    type: turretTypes.power,\r\n    range: 150,\r\n    damage: 100,\r\n    attackSpeed: 2000,\r\n    turret: true,\r\n    shootingAllowed: true,\r\n  };\r\n}\r\n","import { createFastFiringTurret } from '../../Managers/TurretManager/TurretTypes/FastFiring/createFastFiringTurret';\r\nimport { createPowerTurret } from '../../Managers/TurretManager/TurretTypes/PowerTurret/createPowerTurret';\r\n\r\nexport function createTurret(type, x, y) {\r\n  switch (type) {\r\n    case 'fastFiringTurret':\r\n      return createFastFiringTurret(x, y);\r\n\r\n    case 'powerTurret':\r\n      return createPowerTurret(x, y);\r\n  }\r\n}\r\n","export function centerPointOfTile(point, cellSize) {\r\n  return point + cellSize / 2;\r\n}\r\n","export function FindDistanceBetweenVectors(\r\n  currentX,\r\n  currentY,\r\n  targetX,\r\n  targetY\r\n) {\r\n  return parseInt(\r\n    Math.sqrt(Math.pow(currentX - targetX, 2) + Math.pow(currentY - targetY, 2))\r\n  );\r\n}\r\n","import { normalizedTilePositions } from '../../Units/NormalizedTilePositions';\r\nimport { checkIfTileIsFree } from '../TilesCheckingManager/checkIfTileIsFree';\r\nimport { createTurret } from '../../CreateElement/Turrets/createTurret';\r\nimport { centerPointOfTile } from '../../Utils/Tiles/centerPointOfTile';\r\nimport { FindDistanceBetweenVectors } from './FindDistanceBetweenVectors/FindDistanceBetweenVectors';\r\n\r\nexport class TurretsManager {\r\n  constructor(ctx, cellSize, mobsManager) {\r\n    this.ctx = ctx;\r\n    this.cellSize = cellSize;\r\n\r\n    this.turrets = [];\r\n    this.turretPlacedSuccess = true;\r\n\r\n    // MANAGERS\r\n    this.mobsManager = mobsManager;\r\n  }\r\n\r\n  placeTurret(pickedTurret, vector) {\r\n    const vectorNormY = normalizedTilePositions(vector.y, this.cellSize);\r\n    const vectorNormX = normalizedTilePositions(vector.x, this.cellSize);\r\n    console.log(vectorNormX, vectorNormY);\r\n    this.turretPlacedSuccess = checkIfTileIsFree(\r\n      vector,\r\n      this.turrets,\r\n      this.cellSize\r\n    );\r\n    if (this.turrets.length === 0 || this.turretPlacedSuccess)\r\n      this.turrets.push(createTurret(pickedTurret, vectorNormX, vectorNormY));\r\n  }\r\n\r\n  renderTurrets() {\r\n    this.turrets.map((turret) => {\r\n      switch (turret.type) {\r\n        case 'fastFiringTurret':\r\n          this._renderFastTurret(turret);\r\n          break;\r\n\r\n        case 'powerTurret':\r\n          this._renderPowerTurret(turret);\r\n          break;\r\n      }\r\n    });\r\n  }\r\n\r\n  turretShooting() {\r\n    this.turrets.map((turret) => {\r\n      this.mobsManager.getMobs().map((mob, index) => {\r\n        mob.dinstanceFromturret = FindDistanceBetweenVectors(\r\n          mob.x,\r\n          mob.y,\r\n          turret.x,\r\n          turret.y\r\n        );\r\n\r\n        if (this.isMobInRange(turret, mob) && turret.shootingAllowed) {\r\n          setTimeout(() => (turret.shootingAllowed = true), turret.attackSpeed);\r\n\r\n          turret.shootingAllowed = false;\r\n          this._shootToMob(turret, mob, index);\r\n          this._drawLaser(turret, mob);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  isTurretPlacedSuccess() {\r\n    return this.turretPlacedSuccess;\r\n  }\r\n\r\n  getTurrets() {\r\n    return this.turrets;\r\n  }\r\n\r\n  isMobInRange(turret, mob) {\r\n    return (\r\n      FindDistanceBetweenVectors(turret.x, turret.y, mob.x, mob.y) <=\r\n      turret.range\r\n    );\r\n  }\r\n\r\n  _drawLaser(turret, mob) {\r\n    if (this.isMobInRange(turret, mob)) {\r\n      this.ctx.beginPath();\r\n      this.ctx.lineWidth = 2;\r\n      this.ctx.strokeStyle = '#FF0000';\r\n      this.ctx.moveTo(\r\n        centerPointOfTile(turret.x, this.cellSize),\r\n        centerPointOfTile(turret.y, this.cellSize)\r\n      );\r\n\r\n      this.ctx.lineTo(\r\n        centerPointOfTile(mob.x, this.cellSize),\r\n        centerPointOfTile(mob.y, this.cellSize)\r\n      );\r\n      this.ctx.stroke();\r\n    }\r\n  }\r\n\r\n  _shootToMob(turret, mob, index) {\r\n    mob.hp -= turret.damage * 10;\r\n    if (mob.hp < 0) {\r\n      this.mobsManager.getMobs().slice(index, 1);\r\n    }\r\n  }\r\n\r\n  // @todo duplicates\r\n  _renderFastTurret(turret) {\r\n    this.ctx.beginPath();\r\n    this.ctx.fillStyle = turret.color;\r\n\r\n    this.ctx.arc(\r\n      centerPointOfTile(turret.x, this.cellSize),\r\n      centerPointOfTile(turret.y, this.cellSize),\r\n      this.cellSize / 3,\r\n      0,\r\n      2 * Math.PI\r\n    );\r\n\r\n    this.ctx.fill();\r\n    this._showTurretRange(turret);\r\n    this.ctx.stroke();\r\n  }\r\n\r\n  _renderPowerTurret(turret) {\r\n    this.ctx.beginPath();\r\n    this.ctx.fillStyle = turret.color;\r\n\r\n    this._showTurretRange(turret);\r\n\r\n    this.ctx.fillRect(turret.x, turret.y, this.cellSize, this.cellSize);\r\n    this.ctx.stroke();\r\n  }\r\n\r\n  _showTurretRange(turret) {\r\n    this.ctx.beginPath();\r\n    this.ctx.strokeStyle = '#fff';\r\n    this.ctx.arc(\r\n      centerPointOfTile(turret.x, this.cellSize),\r\n      centerPointOfTile(turret.y, this.cellSize),\r\n      turret.range,\r\n      0,\r\n      2 * Math.PI\r\n    );\r\n    this.ctx.stroke();\r\n  }\r\n}\r\n","export function isUpperWall(x) {\r\n  return x === 0;\r\n}\r\n\r\nexport function isLeftWall(y) {\r\n  return y === 0;\r\n}\r\n\r\nexport function isBottomWall(lastColumn, lastRow) {\r\n  // lastColumn - max value for number of columns + 1\r\n  // LastRow - max value of rows\r\n  return lastColumn === lastRow;\r\n}\r\n\r\nexport function isRightWall(y, lastColumn) {\r\n  // lastColumn - max value for number of columns + 1\r\n  return y === lastColumn;\r\n}\r\n","export function createWallTile(x, y) {\r\n  return {\r\n    type: 'wall',\r\n    vector: [x, y],\r\n    color: '#FF0000',\r\n    passable: false,\r\n  };\r\n}\r\n","export function createTerrainTile(x, y) {\r\n  return {\r\n    type: 'terrain',\r\n    f: 0,\r\n    g: 0,\r\n    h: 0,\r\n    vector: [x, y],\r\n    color: '#222',\r\n    neighbors: [],\r\n    addNeighbors: function (\r\n      map,\r\n      cellSize,\r\n      i,\r\n      j,\r\n      maxRows,\r\n      maxCols,\r\n      // @todo connect debugger to this factory\r\n      gameDebugger\r\n    ) {\r\n      // i - iteration for rows\r\n      // j - iteration for cols\r\n\r\n      // Upper half of map\r\n      if (maxCols > j) {\r\n        if (map[i - 1][j].type === 'terrain') {\r\n          this.neighbors.push(map[i - 1][j]);\r\n        }\r\n      }\r\n\r\n      // Bottom half of map\r\n      if (maxRows > i) {\r\n        if (map[i + 1][j].type === 'terrain') {\r\n          this.neighbors.push(map[i + 1][j]);\r\n        }\r\n      }\r\n\r\n      // Fill all columns\r\n      if (maxCols > j) {\r\n        if (map[i][j + 1].type === 'terrain') {\r\n          this.neighbors.push(map[i][j + 1]);\r\n        }\r\n      }\r\n\r\n      // Vertical neighbors\r\n      if (j > 0) {\r\n        if (map[i][j - 1].type === 'terrain')\r\n          this.neighbors.push(map[i][j - 1]);\r\n      }\r\n    },\r\n  };\r\n}\r\n","import {\r\n  isBottomWall,\r\n  isLeftWall,\r\n  isRightWall,\r\n  isUpperWall,\r\n} from '../../CreateElement/MapElement/Walls/wallsUtils';\r\nimport { createWallTile } from '../../CreateElement/MapElement/Walls/createWallTile';\r\nimport { createTerrainTile } from '../../CreateElement/MapElement/createTerrainTile';\r\n\r\nexport class MapManager {\r\n  constructor(canvas, ctx, cols, rows, cellSize, gameDebuggerManager) {\r\n    this.canvas = canvas;\r\n    this.ctx = ctx;\r\n    this.cellSize = cellSize;\r\n\r\n    this.cols = cols;\r\n    this.rows = rows;\r\n\r\n    this.x = 0;\r\n    this.y = 0;\r\n\r\n    this.gameMap = [];\r\n    this.terrain = [];\r\n    this.startSpawnPoint = {};\r\n    this.endSpawnPoint = {};\r\n\r\n    // MANAGERS\r\n    this.gameDebuggerManager = gameDebuggerManager;\r\n  }\r\n\r\n  renderMap() {\r\n    this.x = 0;\r\n    this.y = 0;\r\n    for (let i = 0; i <= this.rows; i++) {\r\n      this.x = 0;\r\n      this._createAndAddRow(i);\r\n\r\n      if (i > 0) this.y += this.cellSize;\r\n      for (let j = 0; j <= this.cols; j++) {\r\n        if (j > 0) this.x += this.cellSize;\r\n\r\n        // WALLS\r\n        this._createAndAddWalls(i, j, this.x, this.y);\r\n\r\n        // SPAWN POINTS\r\n        this._createSpawnAndAddPoints(i, j, this.rows);\r\n\r\n        // TERRAIN\r\n        this._createAndAddTerrain(i, j);\r\n\r\n        let xVec = this.gameMap[i][j].vector[0];\r\n        let yVec = this.gameMap[i][j].vector[1];\r\n\r\n        this.ctx.fillStyle = this.gameMap[i][j].color;\r\n        this.ctx.fillRect(xVec, yVec, this.cellSize, this.cellSize);\r\n\r\n        this.gameDebuggerManager.debugTileVectors(xVec, yVec);\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < this.gameMap.length; i++) {\r\n      for (let j = 0; j < this.gameMap[i].length; j++) {\r\n        if (this.gameMap[i][j].type === 'terrain') {\r\n          this.gameMap[i][j].addNeighbors(\r\n            this.gameMap,\r\n            this.cellSize,\r\n            i,\r\n            j,\r\n            this.rows, // max rows\r\n            this.cols, // max cols\r\n            this.gameDebuggerManager\r\n          );\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getGameMap() {\r\n    return this.gameMap;\r\n  }\r\n\r\n  getEndSpawnPoint() {\r\n    return this.endSpawnPoint;\r\n  }\r\n\r\n  getStartSpawnPoint() {\r\n    return this.startSpawnPoint;\r\n  }\r\n\r\n  _createAndAddRow(i) {\r\n    this.gameMap[i] = [];\r\n  }\r\n\r\n  _createAndAddWalls(i, j) {\r\n    if (\r\n      isUpperWall(j) ||\r\n      isLeftWall(i) ||\r\n      isRightWall(i + 1, this.cols) ||\r\n      isBottomWall(j + 1, this.rows)\r\n    ) {\r\n      this.gameMap[i][j] = createWallTile(this.x, this.y);\r\n    }\r\n  }\r\n\r\n  _createSpawnAndAddPoints(i, j) {\r\n    // @todo createTerrain returns type 'terrain', make it more dynamically\r\n    if (this._isEndSpawnPoint(i, j, this.rows)) {\r\n      this.gameMap[i][j] = createTerrainTile(this.x, this.y);\r\n      this.endSpawnPoint = this.gameMap[i][j];\r\n    }\r\n\r\n    if (this._isStartSpawnPoint(i, j, this.rows)) {\r\n      this.gameMap[i][j] = createTerrainTile(this.x, this.y);\r\n      this.startSpawnPoint = this.gameMap[i][j];\r\n    }\r\n  }\r\n\r\n  _isEndSpawnPoint(i, j, rows) {\r\n    return i === Math.round(rows / 2 - 1) && j === rows - 1;\r\n  }\r\n\r\n  _isStartSpawnPoint(i, j, rows) {\r\n    return i === Math.round(rows / 2 - 1) && j === 0;\r\n  }\r\n\r\n  _createAndAddTerrain(i, j) {\r\n    if (!this.gameMap[i][j]) {\r\n      this.gameMap[i][j] = createTerrainTile(this.x, this.y);\r\n    }\r\n  }\r\n}\r\n","export const shopMenuHeader = (currentMoney) => `\r\n        <p class=\"ui-shop__element\">Shop</p>\r\n        <p class=\"ui-shop__element\">Money: ${currentMoney} $</p>\r\n    `;\r\n","export const shopTurretList = () => `\r\n  <ul>\r\n    <li class=\"turretList ui-shop__element\" value=\"5\" id=\"powerTurret\"> Power turret: 5$ </li>\r\n    <li class=\"turretList ui-shop__element\" value=\"10\" id=\"fastFiringTurret\"> Fast firing: 10$ </li>\r\n  </ul>\r\n`;\r\n","import { shopMenuHeader } from './templates/shopMenu/shopMenuHeader';\r\nimport { shopTurretList } from './templates/shopTurretList/shopTurretList';\r\n\r\nexport class ShopManager {\r\n  constructor() {\r\n    this.money = 140;\r\n    this.shopRoot = document.getElementById('ui-shop');\r\n    this.pickedTurret = 'powerTurret';\r\n  }\r\n\r\n  init() {\r\n    this.renderPanel();\r\n    this.pickTurretType();\r\n  }\r\n\r\n  // MONEY\r\n  getMoney() {\r\n    return this.money;\r\n  }\r\n\r\n  setMoney(value) {\r\n    this.money = value;\r\n  }\r\n\r\n  addMoney(value) {\r\n    this.money += value;\r\n    console.log(this.money);\r\n  }\r\n\r\n  // TURRETS\r\n  getPickedTurret() {\r\n    return this.pickedTurret;\r\n  }\r\n\r\n  pickTurretType() {\r\n    this._shopClickHandler((e) => this._setPickedTurret(e));\r\n  }\r\n\r\n  renderPanel() {\r\n    this.shopRoot.innerHTML = `\r\n      ${shopMenuHeader(this.money)}\r\n      ${shopTurretList()}\r\n    `;\r\n  }\r\n\r\n  // PRIVATE\r\n  _shopClickHandler(handler) {\r\n    this.shopRoot.addEventListener('click', handler);\r\n  }\r\n\r\n  _setPickedTurret(e) {\r\n    this.pickedTurret = e.target.id;\r\n  }\r\n}\r\n","import { centerPointOfTile } from '../../Utils/Tiles/centerPointOfTile';\r\n\r\nexport const MobCreator = (\r\n  ctx,\r\n  cellSize,\r\n  x,\r\n  y,\r\n  type,\r\n  hp,\r\n  color,\r\n  size,\r\n  speed,\r\n  reward,\r\n  score\r\n) => {\r\n  const self = {\r\n    id: Math.random(),\r\n    ctx,\r\n    cellSize,\r\n    x,\r\n    y,\r\n    type,\r\n    hp,\r\n    color,\r\n    size,\r\n    speed,\r\n    reward,\r\n    score,\r\n  };\r\n\r\n  const logger = () => ({\r\n    logOk: console.log(\r\n      `${self.type.type.toUpperCase()} created successfully - instance.`\r\n    ),\r\n  });\r\n\r\n  const mobRender = () => ({\r\n    // Self returning from mapping in waveMobsMove\r\n    move: (self) => {\r\n      self.x += speed;\r\n    },\r\n    showHp: (self) => {\r\n      let hpWidth = self.hp / (self.size * 6);\r\n      let xCenter = self.x - self.size * 2;\r\n      let yCenter = self.y - self.size * 2;\r\n      ctx.beginPath();\r\n      ctx.Style = '#FF0000';\r\n\r\n      ctx.rect(\r\n        centerPointOfTile(xCenter, cellSize),\r\n        centerPointOfTile(yCenter, cellSize),\r\n        hpWidth,\r\n        2\r\n      );\r\n      ctx.stroke();\r\n    },\r\n    render: (self) => {\r\n      ctx.beginPath();\r\n      self.showHp(self);\r\n      ctx.fillStyle = self.color;\r\n      ctx.arc(\r\n        centerPointOfTile(self.x, cellSize),\r\n        centerPointOfTile(self.y, cellSize),\r\n        self.size,\r\n        0,\r\n        2 * Math.PI\r\n      );\r\n      ctx.fill();\r\n    },\r\n  });\r\n\r\n  return Object.assign(self, mobRender(self.x), logger(self.type));\r\n};\r\n","export const MobsModels = {\r\n  tank: {\r\n    type: 'tank',\r\n    hp: 3000,\r\n    color: '#fff',\r\n    size: 11,\r\n    speed: 0.5,\r\n    reward: 25,\r\n    score: 10,\r\n  },\r\n  fast: {\r\n    type: 'fast',\r\n    hp: 1000,\r\n    color: '#FF34859d',\r\n    size: 7,\r\n    speed: 1.2,\r\n    reward: 15,\r\n    score: 6,\r\n  },\r\n};\r\n","import { MobCreator } from '../../CreateElement/Mobs/MobCreator';\r\nimport { MobsModels } from '../../CreateElement/Mobs/Models/MobsModels';\r\nimport { checkIfTileIsFree } from '../TilesCheckingManager/checkIfTileIsFree';\r\n\r\nexport class MobsManager {\r\n  constructor(\r\n    ctx,\r\n    mapManager,\r\n    cellSize,\r\n    lifeManager,\r\n    shopManager,\r\n    scoreManager\r\n  ) {\r\n    this.ctx = ctx;\r\n    this.cellSize = cellSize;\r\n\r\n    this.mobs = [];\r\n\r\n    // MANAGERS\r\n    this.mapManager = mapManager;\r\n    this.turretsManager = {};\r\n    this.lifeManager = lifeManager;\r\n    this.shopManager = shopManager;\r\n    this.scoreManager = scoreManager;\r\n  }\r\n\r\n  inject(turretsManager) {\r\n    this.turretsManager = turretsManager;\r\n  }\r\n\r\n  renderMob(wave) {\r\n    let time = 0;\r\n    // @todo find better solution for timing\r\n    wave.map((mob) => {\r\n      setTimeout(() => {\r\n        this.mobs.push(\r\n          MobCreator(\r\n            this.ctx,\r\n            this.cellSize,\r\n            this.mapManager.getStartSpawnPoint().vector[0],\r\n            this.mapManager.getStartSpawnPoint().vector[1],\r\n            MobsModels[mob],\r\n            MobsModels[mob].hp,\r\n            MobsModels[mob].color,\r\n            MobsModels[mob].size,\r\n            MobsModels[mob].speed,\r\n            MobsModels[mob].reward,\r\n            MobsModels[mob].score\r\n          )\r\n        );\r\n      }, Math.floor(Math.random() * 5 * time++) * 1000);\r\n    });\r\n    time = 0;\r\n  }\r\n\r\n  // @todo separate from MobsManager\r\n  waveMobsMove() {\r\n    // Render wave moving\r\n    this.mobs.map((mob, i) => {\r\n      this._checkMobHp(mob, i);\r\n      if (\r\n        !checkIfTileIsFree(mob, this.turretsManager.getTurrets(), this.cellSize)\r\n      ) {\r\n        mob.x -= 2;\r\n      }\r\n      mob.move(mob);\r\n      mob.render(mob);\r\n      this._checkIfMobHitPlayer(mob, i);\r\n    });\r\n  }\r\n\r\n  getMobs() {\r\n    return this.mobs;\r\n  }\r\n\r\n  _checkIfMobHitPlayer(mob, index) {\r\n    if (\r\n      mob.x > this.mapManager.getEndSpawnPoint().vector[0] + this.cellSize &&\r\n      mob.y === this.mapManager.getEndSpawnPoint().vector[1]\r\n    ) {\r\n      this.lifeManager.lifeHit();\r\n      this.lifeManager.renderLife();\r\n\r\n      this.mobs.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  _checkMobHp(mob, i) {\r\n    if (mob.hp < 0) {\r\n      this.shopManager.addMoney(mob.reward);\r\n      this.shopManager.renderPanel();\r\n      this.scoreManager.addScore(mob.score);\r\n      this.scoreManager.renderScore();\r\n      this.mobs.splice(i, 1);\r\n    }\r\n  }\r\n}\r\n","import { centerPointOfTile } from '../Tiles/centerPointOfTile';\r\n\r\nexport class GameDebugger {\r\n  constructor(ctx, cellSize) {\r\n    this.ctx = ctx;\r\n    this.cellSize = cellSize;\r\n\r\n    this.debugMode = false;\r\n  }\r\n\r\n  set toggleDebuggerMode(toggle) {\r\n    this.debugMode = toggle;\r\n  }\r\n\r\n  addText(\r\n    txt,\r\n    size = this.cellSize / 4,\r\n    color,\r\n    vectorX,\r\n    vectorY,\r\n    fontFamily = 'Arial'\r\n  ) {\r\n    if (!this.debugMode) return;\r\n    this.ctx.beginPath();\r\n    this.ctx.font = `${size}px ${fontFamily}`;\r\n    this.ctx.textAlign = 'center';\r\n    this.ctx.fillStyle = color;\r\n    this.ctx.fillText(`${txt}`, vectorX, vectorY);\r\n    this.ctx.stroke();\r\n  }\r\n\r\n  fillTile(tile, color) {\r\n    if (!this._isDebugMode()) return;\r\n    let x, y;\r\n    if (tile.vector) {\r\n      x = tile.vector[0];\r\n      y = tile.vector[1];\r\n    } else {\r\n      x = tile[0];\r\n      y = tile[1];\r\n    }\r\n\r\n    this.ctx.fillStyle = color;\r\n    this.ctx.fillRect(x, y, this.cellSize, this.cellSize);\r\n  }\r\n\r\n  fillMap(arr, color) {\r\n    if (!this._isDebugMode()) return;\r\n    arr.map((tile) => this.fillTile(tile, color));\r\n  }\r\n\r\n  debugTileVectors(x, y) {\r\n    if (!this._isDebugMode()) return;\r\n    this.addText(\r\n      `[${x} ${y}]`,\r\n      this.cellSize / 5,\r\n      '#fff',\r\n      centerPointOfTile(x, this.cellSize),\r\n      centerPointOfTile(y, this.cellSize)\r\n    );\r\n  }\r\n\r\n  _isDebugMode() {\r\n    return this.debugMode;\r\n  }\r\n}\r\n","export class LifeManager {\r\n  constructor() {\r\n    this.lifeUi = document.getElementById('ui-life');\r\n    this.life = 20;\r\n  }\r\n\r\n  checkIfGameOver() {\r\n    return this.life <= 0;\r\n  }\r\n\r\n  lifeHit() {\r\n    this.life--;\r\n  }\r\n\r\n  renderLife() {\r\n    this.lifeUi.innerHTML = `<p>Life: ${this.life}</p>`;\r\n  }\r\n}\r\n","// @todo temp\r\nexport function createWave(mobsManager) {\r\n  const fast = 'fast';\r\n  const tank = 'tank';\r\n\r\n  const wave = [tank, fast, tank, fast, tank, fast];\r\n  mobsManager.renderMob(wave);\r\n}\r\n","export function removeElementFromArrReverse(arr, el) {\r\n  for (let i = arr.length - 1; i >= 0; i--) {\r\n    if (arr[i] === el) {\r\n      arr.splice(i, 1);\r\n    }\r\n  }\r\n}\r\n","import { removeElementFromArrReverse } from '../../Utils/RemoveElFromArrReverse';\r\nimport { FindDistanceBetweenVectors } from '../../Managers/TurretManager/FindDistanceBetweenVectors/FindDistanceBetweenVectors';\r\n\r\nexport function aStar(start, end, ctx, cellSize, gameDebugger) {\r\n  let openSet = [];\r\n  let closedSet = [];\r\n  let winner = 0;\r\n\r\n  openSet.push(start);\r\n\r\n  closedSet.push(end);\r\n\r\n  while (openSet.length > 0) {\r\n    for (let i = 0; i < openSet.length; i++) {\r\n      if (openSet[winner].f > openSet[i].f) {\r\n        winner = i;\r\n      }\r\n    }\r\n\r\n    let current = openSet[winner];\r\n\r\n    if (current === end) {\r\n      console.log('Done');\r\n    }\r\n\r\n    removeElementFromArrReverse(openSet, current);\r\n    closedSet.push(current);\r\n\r\n    current.neighbors.map((neighbor) => {\r\n      let neiX = neighbor.vector[0];\r\n      let neiY = neighbor.vector[1];\r\n\r\n      let endX = end.vector[0];\r\n      let endY = end.vector[1];\r\n\r\n      gameDebugger.fillTile(neighbor.vector, 'rgba(168, 199, 220, 0.25)');\r\n\r\n      if (!closedSet.includes(neighbor)) {\r\n        const currG = current.g + 1;\r\n\r\n        if (openSet.includes(neighbor)) {\r\n          if (currG < neighbor.g) {\r\n            neighbor.g = currG;\r\n          }\r\n        } else {\r\n          neighbor.g = currG;\r\n          openSet.push(neighbor);\r\n        }\r\n\r\n        neighbor.h = FindDistanceBetweenVectors(neiX, neiY, endX, endY);\r\n        neighbor.f = neighbor.g + neighbor.h;\r\n        neighbor.cameFrom = current;\r\n      }\r\n    });\r\n  }\r\n}\r\n","export class ScoreManager {\r\n  constructor() {\r\n    this.score = 0;\r\n    this.scoreUi = document.getElementById('ui-score');\r\n  }\r\n\r\n  addScore(value) {\r\n    this.score += value;\r\n  }\r\n\r\n  renderScore() {\r\n    this.scoreUi.innerHTML = `Score: ${this.score}`;\r\n  }\r\n}\r\n","import { MouseManager } from './Managers/MouseManager/MouseManager';\r\nimport { TurretsManager } from './Managers/TurretManager/TurretManager';\r\nimport { MapManager } from './Managers/MapManager/MapManager';\r\nimport { ShopManager } from './Managers/ShopManager/ShopManager';\r\nimport { MobsManager } from './Managers/MobsManager/MobsManager';\r\nimport { GameDebugger } from './Utils/Debuggers/GameDebugger';\r\nimport { LifeManager } from './Managers/LifeManager/LifeManager';\r\nimport { createWave } from './Managers/WaveManager/WaveManager';\r\nimport { aStar } from './PathFinding/aStar/aStar';\r\nimport { ScoreManager } from './Managers/ScoreManager/ScoreManager';\r\n\r\nwindow.onload = () => {\r\n  const canvas = document.getElementById('canvas');\r\n  const ctx = canvas.getContext('2d');\r\n  const gameDebugModeCheckbox = document.getElementById('debugMode');\r\n\r\n  const cols = 25;\r\n  const rows = 25;\r\n  const cellSize = 30;\r\n\r\n  ctx.canvas.width = cols * cellSize;\r\n  ctx.canvas.height = rows * cellSize;\r\n\r\n  // @todo IOC\r\n  const scoreManager = new ScoreManager();\r\n  const gameDebugger = new GameDebugger(ctx, cellSize);\r\n  const mouseManager = new MouseManager(canvas, ctx, cellSize);\r\n  const mapManager = new MapManager(\r\n    canvas,\r\n    ctx,\r\n    cols,\r\n    rows,\r\n    cellSize,\r\n    gameDebugger\r\n  );\r\n  mapManager.renderMap();\r\n\r\n  const lifeManager = new LifeManager();\r\n  const shopManager = new ShopManager();\r\n  const mobsManager = new MobsManager(\r\n    ctx,\r\n    mapManager,\r\n    cellSize,\r\n    lifeManager,\r\n    shopManager,\r\n    scoreManager\r\n  );\r\n\r\n  const turretsManager = new TurretsManager(ctx, cellSize, mobsManager);\r\n\r\n  mobsManager.inject(turretsManager);\r\n  createWave(mobsManager);\r\n  lifeManager.renderLife();\r\n\r\n  shopManager.init();\r\n  scoreManager.renderScore();\r\n  lifeManager.renderLife();\r\n\r\n  function gameLoop() {\r\n    mapManager.renderMap();\r\n\r\n    aStar(\r\n      mapManager.getStartSpawnPoint(),\r\n      mapManager.getEndSpawnPoint(),\r\n      ctx,\r\n      cellSize,\r\n      gameDebugger\r\n    );\r\n\r\n    turretsManager.turretShooting();\r\n    mouseManager.drawMousePosition();\r\n    mobsManager.waveMobsMove();\r\n\r\n    turretsManager.renderTurrets();\r\n    if (lifeManager.checkIfGameOver()) {\r\n      alert('Game over');\r\n      return;\r\n    }\r\n    requestAnimationFrame(gameLoop);\r\n  }\r\n\r\n  gameLoop();\r\n\r\n  gameDebugModeCheckbox.addEventListener('click', function () {\r\n    gameDebugger.toggleDebuggerMode = this.checked;\r\n    console.warn(`Debugger mode: ${this.checked}`);\r\n  });\r\n\r\n  mouseManager.gameMouseClickHandler(() => {\r\n    if (shopManager.money > 0) {\r\n      turretsManager.placeTurret(\r\n        shopManager.getPickedTurret(),\r\n        mouseManager.getMousePosPerTile()\r\n      );\r\n\r\n      if (turretsManager.isTurretPlacedSuccess()) {\r\n        shopManager.setMoney(shopManager.getMoney() - 5);\r\n        shopManager.renderPanel();\r\n      }\r\n    } else {\r\n      // @todo add better notification for user\r\n      console.warn('no Money');\r\n    }\r\n  });\r\n};\r\n"]}